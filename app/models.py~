from hashlib import md5
from app import db
from app import app

ROLE_USER = 0
ROLE_ADMIN = 1


db.Table('send_ask',
         db.Column('askid',db.Integer,db.ForeignKey('ask.id')),
         db.Column('friendid',db.Integer,db.ForeignKey('friend.id')),
         db.Column('userid',db.Integer,db.ForeignKey('user.id')),
         db.Column('datesent',db.DateTime)
)


db.Table('reply_recommend',
         db.Column('recommendid', db.Integer,db.ForeignKey('recommend.id')),
         db.Column('friendid', db.Integer,db.ForeignKey('friend.id')),
         db.Column('askid', db.Integer,db.ForeignKey('ask.id')),
         db.Column('datesent',db.DateTime)
)

class User(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    nickname = db.Column(db.String(64), index = True, unique = True)
    email = db.Column(db.String(120), index = True, unique = True)
    role = db.Column(db.SmallInteger, default = ROLE_USER)
    asks = db.relationship('Ask', backref = 'author', lazy = 'dynamic')
    friends = db.relationship('Friend', backref = 'owner', lazy = 'dynamic')
    last_seen = db.Column(db.DateTime)

    def is_authenticated(self):
        return True

    def is_active(self):
        return True

    def is_anonymous(self):
        return False

    def get_id(self):
        return unicode(self.id)

    @staticmethod
    def make_unique_nickname(nickname):
        if User.query.filter_by(nickname = nickname).first() == None:
            return nickname
        version = 2
        while True:
            new_nickname = nickname + str(version)
            if User.query.filter_by(nickname = new_nickname).first() == None:
                break
            version += 1
        return new_nickname


    def __repr__(self):
        return '<User %r>' % (self.nickname)


class Ask(db.Model):

    id = db.Column(db.Integer, primary_key = True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    service = db.Column(db.Integer,nullable=False)
    category = db.Column(db.Integer,nullable=False)
    question = db.Column(db.String(140),nullable=False)
    parish = db.Column(db.Integer,nullable=False)
    area = db.Column(db.String(120))

    def __repr__(self):
        return '<Ask %r>' % (self.question)


class Recommend(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    service = db.Column(db.Integer,nullable=False)
    category = db.Column(db.Integer,nullable=False)
    name = db.Column(db.String(120),nullable=False)
    company = db.Column(db.String(120))
    phone = db.Column(db.String(120))
    email = db.Column(db.String(120))
    website = db.Column(db.String(120))
    parish = db.Column(db.Integer,nullable=False)
    rating = db.Column(db.Integer)
    review = db.Column(db.String(140))

    def __repr__(self):
        return '<Recommend %r>' % (self.review)


class Friend(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    firstname = db.Column(db.String(120),nullable=False)
    lastname = db.Column(db.String(120),nullable=False)
    email = db.Column(db.String(120),nullable=False)

    def __repr__(self):
        return '<Friend %r>' % (self.firstname)

class ContactUs(db.Model):
    id = db.Column(db.Integer, primary_key = True)
    email = db.Column(db.String(120),nullable=False)
    message = db.Column(db.String(140),nullable=False)

    def __repr__(self):
        return '<ContactUs %r>' % (self.email)
